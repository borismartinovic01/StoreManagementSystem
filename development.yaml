version: "3"
services:
  authenticationDB:
    image: mysql
    environment:
      - MYSQL_ROOT_PASSWORD=root
    ports:
      - 3308:3306
    volumes:
      - ./authentication/init:/docker-entrypoint-initdb.d
      - ./authdata:/var/lib/mysql
    networks:
      - authenticationNetwork
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "authenticationDB", "-P", "3306", "-u", "root", "-p$$MYSQL_ROOT_PASSWORD"]
      timeout: 10s
      retries: 70
  adminer:
    image: adminer
    ports:
      - 8083:8080
    networks:
      - authenticationNetwork
      - storeNetwork
  authenticationdbmigration:
    build:
      context: .
      dockerfile: authenticationDBMigration
    # image: authenticationdbmigration
    environment:
      - DATABASE_URL=authenticationDB
      - PRODUCTION="PRODUCTION"
    networks:
      - authenticationNetwork
    depends_on:
      authenticationDB:
        condition: service_healthy
  authentication:
    build:
      context: .
      dockerfile: authenticationdf
    # image: authentication
    ports:
      - 5000:5000
    environment:
      - DATABASE_URL=authenticationDB
      - PRODUCTION="PRODUCTION"
    networks:
      - authenticationNetwork
    depends_on:
      - authenticationdbmigration
  storeDB:
    image: mysql
    environment:
      - MYSQL_ROOT_PASSWORD=root
    ports:
      - 3307:3306
    volumes:
      - ./applications/init:/docker-entrypoint-initdb.d
      - ./storedata:/var/lib/mysql
    networks:
      - storeNetwork
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "storeDB", "-P", "3306", "-u", "root", "-p$$MYSQL_ROOT_PASSWORD"]
      timeout: 10s
      retries: 70
  storedbmigration:
    build:
      context: .
      dockerfile: storeDBMigration
    # image: storedbmigration
    environment:
      - DATABASE_URL=storeDB
      - PRODUCTION="PRODUCTION"
    networks:
      - storeNetwork
    depends_on:
      storeDB:
        condition: service_healthy
  ownerapplication:
    build:
      context: .
      dockerfile: ownerApplication
    # image: ownerapplication
    ports:
      - 5001:5000
    environment:
      - DATABASE_URL=storeDB
      - PRODUCTION="PRODUCTION"
      - SPARKAPP_URL=sparkapp
    networks:
      - storeNetwork
    depends_on:
      - storedbmigration
  customerapplication:
    build:
      context: .
      dockerfile: customerApplication
    # image: customerapplication
    ports:
      - 5002:5000
    environment:
      - DATABASE_URL=storeDB
      - PRODUCTION="PRODUCTION"
      - BLOCKCHAIN_URL=blockchain
    networks:
      - storeNetwork
    depends_on:
      - storedbmigration
  courierapplication:
    build:
      context: .
      dockerfile: courierApplication
    # image: courierapplication
    ports:
      - 5003:5000
    environment:
      - DATABASE_URL=storeDB
      - PRODUCTION="PRODUCTION"
      - BLOCKCHAIN_URL=blockchain
    networks:
      - storeNetwork
    depends_on:
      - storedbmigration
  spark-master:
    image: bde2020/spark-master:3.3.0-hadoop3.3
    container_name: spark-master
    ports:
      - 8080:8080
      - 7077:7077
    environment:
      - INIT_DAEMON_STEP=setup_spark
    networks:
      - storeNetwork
  spark-worker-1:
    image: bde2020/spark-worker:3.3.0-hadoop3.3
    container_name: spark-worker-1
    depends_on:
      - spark-master
    ports:
      - 8081:8081
    environment:
      - SPARK_MASTER=spark://spark-master:7077
    networks:
      - storeNetwork
  spark-worker-2:
    image: bde2020/spark-worker:3.3.0-hadoop3.3
    container_name: spark-worker-2
    depends_on:
      - spark-master
    ports:
      - 8082:8081
    environment:
      - SPARK_MASTER=spark://spark-master:7077
    networks:
      - storeNetwork
  sparkapp:
    build:
      context: ./sparkapp
      dockerfile: sparkapp
    # image: sparkapp
    environment:
      - DATABASE_URL=storeDB
      - PRODUCTION="PRODUCTION"
      - SPARK_MASTER=spark-master
    ports:
      - 5004:5004
    networks:
      - storeNetwork
  blockchain:
    image: trufflesuite/ganache-cli
    ports:
      - 8545:8545
    networks:
      - storeNetwork
networks:
  authenticationNetwork:
  storeNetwork: